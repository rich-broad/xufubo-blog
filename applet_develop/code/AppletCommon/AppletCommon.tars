

module HardwareApplet
{

    // 命令字
    const string cmd0 = "getNewTicket";                 // 获取新票据
    const string cmd1 = "getCategoryList";              // 得到某层级下的分类列表
    const string cmd2 = "addCategoryInfo";              // 增加分类信息
    const string cmd3 = "getAttributeList";             // 得到属性列表
    const string cmd4 = "addAttributeInfo";             // 增加属性信息
    const string cmd5 = "getAttributeValueList";        // 得到某个属性下边属性值列表
    const string cmd6 = "addAttributeValueInfo";        // 增加属性值信息
    const string cmd7 = "getBrandList";                 // 得到品牌列表
    const string cmd8 = "addBrandInfo";         	    // 增加品牌信息
    const string cmd9 = "getMakerList";         		// 得到厂商列表
    const string cmd10 = "addMakerInfo";        		// 增加厂商信息
    const string cmd11 = "getGoodsSPUList";     		// 获取商品SPU列表
    const string cmd12 = "addGoodsSPUInfo";     		// 增加商品SPU
    const string cmd13 = "addGoodsSKUInfo";     		// 增加商品库存信息
    const string cmd14 = "getGoodsSKUList";     		// 获取商品库存
    const string cmd15 = "addMyAddressInfo";    		// 买家增加地址信息
    const string cmd16 = "getMyAddressList";    		// 得到我的地址信息
    const string cmd17 = "addGoodsToShopCart";  		// 添加商品到购物车
    const string cmd18 = "getMyShopCartInfo";   		// 得到我的购物车信息
    const string cmd19 = "submitOrder";         		// 提交订单
    const string cmd20 = "confirmOrder";        		// 确认订单
    const string cmd21 = "getProvinceList";     		// 得到省份列表
    const string cmd22 = "getCityListByProvince";       // 得到省下边市列表
    const string cmd23 = "getCountyListByCity";         // 得到市下边县列表
    const string cmd24 = "getMyOrderList";              // 获取我的订单信息--买家   还没写接入层

    enum COMMRETCODE
    {
        E_SUCCESS = 0,                          // 0-成功
        E_TARS_ENCODE_ERROR = 1,
        E_TARS_DECODE_ERROR = 2,
        E_TICKET_INVALID = 3,
        E_TICKET_EXPIRED = 4,
        E_TICKET_WILL_EXPIRED = 5,
        E_BUSINESS_ERROR = 6,
        E_BUSINESS_EXCEPTION = 7,
    };

    // 票据
    struct SecurityTicket
    {
        0 require string sessionKey;            // session key
        1 require long timets;                  // session key时间
        2 require string signature;             // 签名,用于后台校验
    };

    //设备信息
    struct DeviceInfo
    {
    	0 require string imei1;			        //主卡槽IMEI
    	1 require string imei2;			        //副卡槽IMEI
    	2 require string macAddr;		        //MAC地址
    	3 require string brand;			        //品牌
    	4 require string mode;			        //型号
    };

    // ROM信息
    struct ROMInfo
    {
    	0 require string sysId;			 	    //操作系统Id（如androidId）
    	1 require string sysVersionName;	 	//操作系统版本名称
    	2 require string sysVersionCode; 		//操作系统版本号
    	3 require int rootFlag;			 	    //0——未知；1——已root；2——未root
    };
    
    // 网络信息
    struct NetInfo
    {
    	0 require int netType;			       //网络类型
    	1 require string wifiSsid;		       //Wifi名称
    	2 require string wifiBssid;		       //Wifi路由器的Mac地址
    };

    struct SessionInfo
    {
        0 require int uid;			           //用户id,与微信的openid对应
    	1 require string openid;		       //openid
        2 require string unionid;              //同一个微信开放平台下的不同应用的用户唯一表示,详见: https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/union-id.html
    };

    // 接入层统一头部
    struct ProxyReqHead
    {
	    0 require int requestId;		        // 请求序列号
        1 require string cmd;                   // 需要调用的命令字
        2 require string st;                    // 请求st  SecurityTicket序列化，加密，base64之后生成
        3 require long clientTimestamp;	        // sdk当前时间戳，单位毫秒
    	4 require long svrTimestamp;		    // 根据后台之前协议返回的svrTimestamp校准后计算的近似后台时间戳
        5 require DeviceInfo deviceInfo;		// 设备信息
    	6 require ROMInfo romInfo;			    // 系统信息
    	7 require NetInfo netInfo;			    // 网络信息
    	
    };

    // 接入层响应头部
    struct ProxyRspHead
    {
        0 require COMMRETCODE ret;		        //返回码
    	1 require long svrTimestamp;		    //后台时间戳，单位毫秒
    	2 require int csTicketState;		    // 0——有效,其他见COMMRETCODE
        3 require string st;                    // 票据，与请求中的一致
        4 require int requestId;		        // 请求序列号，前端可校验与PkgReqHead.requestId 中的一致
    };

    // 调到后端服务的统一头部
    struct AppletCommHead
    {
        0 require DeviceInfo deviceInfo;		//设备信息
    	1 require ROMInfo romInfo;			    //系统信息
    	2 require NetInfo netInfo;			    //网络信息
        3 require SecurityTicket st;            //票据
    	4 require long clientTimestamp;	        //sdk当前时间戳，单位毫秒
        5 require SessionInfo sessionInfo;      //会话信息
    };

    // 微信回包
    struct WXJSCodeToSessionRsp
    {
        0 require string openid;
        1 require string session_key;
        2 require string unionid;
        3 require int errcode;
        4 require string errmsg;
    };

    //===================================以下为具体命令字的协议定义=============================================//

    //===============================AppletAuthServer接口定义==========================================
    // 票据即将过期或者已经过期后，获取新票据 getNewTicket
    struct GetNewTicketReq
    {
        0 require string wx_code;               // 前端调用wx.login获取的code
    };

    struct GetNewTicketRsp
    {
        0 require int ret = 0;                  // 0-成功，其他失败
        1 require string errmsg;                // 错误信息
        2 require string st;                    // 新的业务票据
    };

    struct ProxyGetNewTicketReq
    {
	    0 require ProxyReqHead head;		    //请求头部
	    1 require GetNewTicketReq body;		    //请求包体
    };

    struct ProxyGetNewTicketRsp	
    {
	    0 require ProxyRspHead head;		    //响应头部
	    1 require GetNewTicketRsp body;	        //响应包体
    };

    //======================================AppletGoodsManageServer接口定义=================================

    //------------------------------------分类信息管理------------------------------
    // 得到某层级下的分类列表 getCategoryList
    struct GetCategoryListReq
    {
        0 optional int level;           // 分类层级
    };

    struct CategoryItem
    {
        0 require int categoryId;           // 分类id
        1 require string categoryName;      // 分类名称
        2 require int parentId;             // 父类id
        3 require int level;                // 分类层级
        4 require string imgUrl;            // 图标
    };

    struct GetCategoryListRsp
    {
        0 require int ret = 0;                           // 0-成功，其他失败
        1 require string errmsg;                         // 错误信息
        2 require map<int, CategoryItem> mpCategory;     // map<k=level, v=CategoryItem>
    };

    struct ProxyGetCategoryListReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require GetCategoryListReq body;		    //请求包体
    };

    struct ProxyGetCategoryListRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require GetCategoryListRsp body;	        //响应包体
    };

    // 增加分类信息 addCategoryInfo
    struct AddCategoryInfoReq
    {
        0 require CategoryItem item;
    };

    struct AddCategoryInfoRsp
    {
        0 require int ret = 0;                      // 0-成功，其他失败
        1 require string errmsg;                    // 错误信息
    };

    struct ProxyAddCategoryInfoReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require AddCategoryInfoReq body;		    //请求包体
    };

    struct ProxyAddCategoryInfoRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require AddCategoryInfoRsp body;	        //响应包体
    };

    //-------------------------属性元数据管理-----------------------------------
    // 得到属性列表 getAttributeList
    struct GetAttributeListReq
    {
        0 optional string reserved_field;           // 保留字段
    };

    struct AttributeItem
    {
        0 require int attrId;               // 属性id
        1 require string attrName;          // 属性名称
        2 require string attrDesc;          // 属性描述
    };

    struct GetAttributeListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<AttributeItem> itemList;     // map<k=level, v=CategoryItem>
    };

    struct ProxyGetAttributeListReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require GetAttributeListReq body;		    //请求包体
    };

    struct ProxyGetAttributeListRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require GetAttributeListRsp body;	        //响应包体
    };

    // 增加属性信息 addAttributeInfo
    struct AddAttributeInfoReq
    {
        0 require AttributeItem item;
    };

    struct AddAttributeInfoRsp
    {
        0 require int ret = 0;                      // 0-成功，其他失败
        1 require string errmsg;                    // 错误信息
    };

    struct ProxyAddAttributeInfoReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require AddAttributeInfoReq body;		    //请求包体
    };

    struct ProxyAddAttributeInfoRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require AddAttributeInfoRsp body;	        //响应包体
    };

    //-------------------------属性值元数据管理-----------------------------------
    // 得到某个属性下边属性值列表 getAttributeValueList
    struct GetAttributeValueListReq
    {
        0 optional int attrId;           // 属性id
    };

    struct AttributeValueItem
    {
        0 require int attrValueId;            // 属性值id
        1 require string name;                // 名称
        2 require int attrId;                 // 属性值属于哪个属性
    };

    struct GetAttributeValueListRsp
    {
        0 require int ret = 0;                              // 0-成功，其他失败
        1 require string errmsg;                            // 错误信息
        2 require map<int, AttributeValueItem> mpAttrValue; // map<k=attrId, v=AttributeValueItem>
    };

    struct ProxyGetAttributeValueListReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetAttributeValueListReq body;		//请求包体
    };

    struct ProxyGetAttributeValueListRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetAttributeValueListRsp body;	    //响应包体
    };

    // 增加属性值信息 addAttributeValueInfo
    struct AddAttributeValueInfoReq
    {
        0 require AttributeValueItem item;
    };

    struct AddAttributeValueInfoRsp
    {
        0 require int ret = 0;                      // 0-成功，其他失败
        1 require string errmsg;                    // 错误信息
    };

    struct ProxyAddAttributeValueInfoReq
    {
	    0 require ProxyReqHead head;		                //请求头部
	    1 require AddAttributeValueInfoReq body;		    //请求包体
    };

    struct ProxyAddAttributeValueInfoRsp
    {
	    0 require ProxyRspHead head;		                //响应头部
	    1 require AddAttributeValueInfoRsp body;	        //响应包体
    };

    //-------------------------品牌数据管理-----------------------------------
    // 得到品牌列表 getBrandList
    struct GetBrandListReq
    {
        0 optional string reserved_field;           // 保留字段
    };

    struct BrandItem
    {
        0 require int brandId;               // 品牌id
        1 require string brandName;          // 品牌名称
        2 require string brandDesc;          // 描述
    };

    struct GetBrandListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<BrandItem> itemList;          // 
    };

    struct ProxyGetBrandListReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require GetBrandListReq body;		        //请求包体
    };

    struct ProxyGetBrandListRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require GetBrandListRsp body;	            //响应包体
    };

    // 增加品牌信息 addBrandInfo
    struct AddBrandInfoReq
    {
        0 require BrandItem item;
    };

    struct AddBrandInfoRsp
    {
        0 require int ret = 0;                      // 0-成功，其他失败
        1 require string errmsg;                    // 错误信息
    };

    struct ProxyAddBrandInfoReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require AddBrandInfoReq body;		        //请求包体
    };

    struct ProxyAddBrandInfoRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require AddBrandInfoRsp body;	            //响应包体
    };

    //-------------------------厂商数据管理-----------------------------------
    // 得到厂商列表 getMakerList
    struct GetMakerListReq
    {
        0 optional string reserved_field;           // 保留字段
    };

    struct MakerItem
    {
        0 require int makerId;               // 厂商id
        1 require string makerName;          // 厂商名称
        2 require string makerDesc;          // 厂商描述
    };

    struct GetMakerListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<MakerItem> itemList;          //
    };

    struct ProxyGetMakerListReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require GetMakerListReq body;		        //请求包体
    };

    struct ProxyGetMakerListRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require GetMakerListRsp body;	            //响应包体
    };

    // 增加厂商信息 addMakerInfo
    struct AddMakerInfoReq
    {
        0 require MakerItem item;
    };

    struct AddMakerInfoRsp
    {
        0 require int ret = 0;                      // 0-成功，其他失败
        1 require string errmsg;                    // 错误信息
    };

    struct ProxyAddMakerInfoReq
    {
	    0 require ProxyReqHead head;		        //请求头部
	    1 require AddMakerInfoReq body;		        //请求包体
    };

    struct ProxyAddMakerInfoRsp
    {
	    0 require ProxyRspHead head;		        //响应头部
	    1 require AddMakerInfoRsp body;	            //响应包体
    };

    //-------------------------商品SPU信息管理-----------------------------------

    // 商品媒体信息
    struct GoodsMediaInfo
    {
        0 require int mediaId;              // id
        1 require int type;                 // 媒体类型 1-图片，2-视频
        2 require int position;             // 显示位置 1-主图/视频，2-轮播图，3-内容图
        3 require string mediaUrl;          // 媒体utl
    };

    struct GoodsSPUSimpleInfo
    {
        0 require int spuId;
        1 require string name;
        2 require string brandName;
        3 require string maker;
        4 require string sDesc;
        5 require int status = -1;
    };

    struct GoodsSPUDetail
    {
        0 require int spuId;
        1 require string name;
        2 require string brandName;
        3 require string maker;
        4 require string sDesc;
        5 require int status = -1;
        6 require int brandId;
        7 require string desc;
        8 require GoodsMediaInfo mediaInfo;
        9 require vector<CategoryItem> categoryInfo;    // 分类信息
    };

    // 获取商品SPU列表 getGoodsSPUList
    struct GetGoodsSPUListReq
    {
        0 require string name;          // 商品名称
    };

    struct GetGoodsSPUListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<GoodsSPUSimpleInfo> infoList; 
    };

    struct ProxyGetGoodsSPUListReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetGoodsSPUListReq body;		        //请求包体
    };

    struct ProxyGetGoodsSPUListRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetGoodsSPUListRsp body;	            //响应包体
    };

    // 增加商品SPU addGoodsSPUInfo [需要插入SPU表和商品分类表]
    struct AddGoodsSPUInfoReq
    {
        0 require GoodsSPUDetail detail;
    };

    struct AddGoodsSPUInfoRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
    };

    struct ProxyAddGoodsSPUInfoReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require AddGoodsSPUInfoReq body;		        //请求包体
    };

    struct ProxyAddGoodsSPUInfoRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require AddGoodsSPUInfoRsp body;	            //响应包体
    };

    //-------------------------商品SKU信息管理-----------------------------------
    struct GoodsSKUAttrInfo
    {
        0 require int attrId;               // 属性id
        1 require string attrName;          // 属性名称
        2 require int attrValueId;          // 属性值id
        3 require string attrValueName;     // 属性值名称
    };
    struct GoodsSKUInfo
    {
        0 require int skuId;
        1 require int spuId;                           // sku所属商品spu
        2 require string name;                         // 名称
        3 require int stock;                           // 库存
        4 require int warnStock;                       // 告警库存
        5 require int price;                           // 价格，单位-分
        6 require int minCount;                        // 最小计数单位，比如扳手最想知道我的库存还有多少盒，这时候就需要填每盒多少个，该字段就是这个意思
        7 require int isDefault;                       // 是否默认sku,用于在商城展示
        8 require string imgUrl;                       // sku对应的url
        9 require vector<GoodsSKUAttrInfo> attrList;   // sku的属性列表
    };

    // 增加商品库存信息 addGoodsSKUInfo
    struct AddGoodsSKUInfoReq
    {
        0 require GoodsSKUInfo skuInfo;                // 商品sku信息
    };

    struct AddGoodsSKUInfoRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
    };

    struct ProxyAddGoodsSKUInfoReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require AddGoodsSKUInfoReq body;		        //请求包体
    };

    struct ProxyAddGoodsSKUInfoRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require AddGoodsSKUInfoRsp body;	            //响应包体
    };

    // 获取商品库存 getGoodsSKUList--商家使用
    struct GetGoodsSKUListReq
    {
        0 require int spuId;                            // 商品spu id
        1 require vector<GoodsSKUAttrInfo> attrList;    // 商品属性列表
    };

    struct GetGoodsSKUListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<GoodsSKUInfo> infoList;       // 列表
    };

    struct ProxyGetGoodsSKUListReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetGoodsSKUListReq body;		        //请求包体
    };

    struct ProxyGetGoodsSKUListRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetGoodsSKUListRsp body;	            //响应包体
    };



    //-------------------------其他商品信息接口----------------------------------
    



    //======================================AppletGoodsCommonServer接口定义=================================

    //-----------------------------------地址信息管理------------------------------------------
    struct AddressInfo
    {
        0 require int addressId;
        1 require int uid;
        2 require string phoneNum;              // 手机号
        3 require string province;              // 省
        4 require string city;                  // 市
        5 require string county;                // 县
        6 require string addressDetail;         // 详细地址
        7 require string receiver;              // 收货人
    };

    // 买家增加地址信息 addMyAddressInfo
    struct AddMyAddressInfoReq
    {
        0 require AddressInfo addressInfo;
    };

    struct AddMyAddressInfoRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
    };

    struct ProxyAddMyAddressInfoReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require AddMyAddressInfoReq body;		        //请求包体
    };

    struct ProxyAddMyAddressInfoRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require AddMyAddressInfoRsp body;	            //响应包体
    };

    // 得到我的地址信息(通过uid查询) getMyAddressList
    struct GetMyAddressListReq
    {
        0 optional string reserved_field;           // 保留字段
    };

    struct GetMyAddressListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<AddressInfo> infoList;        //
    };

    struct ProxyGetMyAddressListReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetMyAddressListReq body;		        //请求包体
    };

    struct ProxyGetMyAddressListRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetMyAddressListRsp body;	            //响应包体
    };

    // 得到省份列表 getProvinceList
    struct GetProvinceListReq
    {
        0 optional string reserved_field;           // 保留字段
    };

    struct GetProvinceListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<string> nameList;             //
    };

    struct ProxyGetProvinceListReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetProvinceListReq body;		        //请求包体
    };

    struct ProxyGetProvinceListRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetProvinceListRsp body;	            //响应包体
    };

    // 得到省下边市列表getCityListByProvince
    struct GetCityListByProvinceReq
    {
        0 optional string provinceName;                // 省份名
    };

    struct GetCityListByProvinceRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<string> nameList;             // 省份下市的列表
    };

    struct ProxyGetCityListByProvinceReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetCityListByProvinceReq body;		//请求包体
    };

    struct ProxyGetCityListByProvinceRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetCityListByProvinceRsp body;	    //响应包体
    };

    // 得到市下边县列表getCountyListByCity
    struct GetCountyListByCityReq
    {
        0 optional string cityName;           // 市名
    };

    struct GetCountyListByCityRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<string> nameList;             // 市下边的县列表
    };

    struct ProxyGetCountyListByCityReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetCountyListByCityReq body;		    //请求包体
    };

    struct ProxyGetCountyListByCityRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetCountyListByCityRsp body;	        //响应包体
    };

    //------------------------------------购物相关接口--------------------------------------
    // 购物车item
    struct ShopCartItem
    {
        0 require int cartId;               // 购物车条目id
        1 require int spuId;
        2 require int skuId;
        3 require int uid;
        4 require int price;
        5 require int tranPrice;
        6 require int num;
        7 require int status;
        8 require GoodsSKUInfo skuInfo;
        
    };

    // 订单item
    struct OrderItem
    {
        0 require int orderId;
        1 require int uid;
        2 require int payWay;                       // 支付方式
        3 require int status;                       // 订单状态 1-新提交待确认，2-已确认(主商量价格、确认发货地址等)，3-已发货代付款，4-已发货已付款
        4 require int money;                        // 商品金额，在订单新提交时计算,后续订单确认后金额可能改变
        5 require int tranMoney;                    // 实际支付金额，在status设置为2(卖家进行确认)时进行更新
        6 require int freight;                      // 运费
        7 require string billNo;                    // 订单号，提交订单时由后台生成
        8 require AddressInfo addressInfo;          // 地址信息  这里增加的时候只需要传递一个addressId即可，展示的时候会依据addressId查地址表，
                                                    // 填充该结构，这就要求地址信息表只能增加和查询，不可修改。因为你改的时候，这个addressId对应
                                                    // 的地址在某个订单中或许已经在用了，如果改了，这个订单的展示信息和原来提交时就不一致了。
        9 require vector<ShopCartItem> itemList;
    };

    // 添加商品到购物车 addGoodsToShopCart
    struct AddGoodsToShopCartReq
    {
        0 require int spuId;
        1 require int skuId;
        2 require int price;                        // 这里需要sku的价格，因为这个sku在将来的价格可能会变，但是这一次交易是确定的，因此需要保存下来。
        3 require int tranPrice;
        4 require int num;
        5 require int status;
    };

    struct AddGoodsToShopCartRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
    };

    struct ProxyAddGoodsToShopCartReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require AddGoodsToShopCartReq body;		    //请求包体
    };

    struct ProxyAddGoodsToShopCartRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require AddGoodsToShopCartRsp body;	        //响应包体
    };

    // 得到我的购物车信息 getMyShopCartInfo
    struct GetMyShopCartInfoReq
    {
        0 require string reserved_field;           // 保留字段
    };

    struct GetMyShopCartInfoRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<ShopCartItem> itemList;       // item list
    };

    struct ProxyGetMyShopCartInfoReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetMyShopCartInfoReq body;		    //请求包体
    };

    struct ProxyGetMyShopCartInfoRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetMyShopCartInfoRsp body;	        //响应包体
    };

    // 提交订单 submitOrder
    struct SubmitOrderReq
    {
        0 require OrderItem item;       // item
    };

    struct SubmitOrderRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
    };

    struct ProxySubmitOrderReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require SubmitOrderReq body;		            //请求包体
    };

    struct ProxySubmitOrderRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require SubmitOrderRsp body;	                //响应包体
    };

    // 确认订单 confirmOrder (主要是确认订单中的商品价格和收获地址的正确性)
    struct ConfirmOrderReq
    {
        0 require OrderItem item;       // item
    };

    struct ConfirmOrderRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
    };

    struct ProxyConfirmOrderReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require ConfirmOrderReq body;		            //请求包体
    };

    struct ProxyConfirmOrderRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require ConfirmOrderRsp body;	                //响应包体
    };

    // 获取我的订单信息--买家getMyOrderList   这个还没有写接入层呢
    struct GetMyOrderListReq
    {
        0 require int status;                       // 订单状态
    };

    struct GetMyOrderListRsp
    {
        0 require int ret = 0;                         // 0-成功，其他失败
        1 require string errmsg;                       // 错误信息
        2 require vector<OrderItem> itemList;          // 订单列表
    };

    struct ProxyGetMyOrderListReq
    {
	    0 require ProxyReqHead head;		            //请求头部
	    1 require GetMyOrderListReq body;		        //请求包体
    };

    struct ProxyGetMyOrderListRsp
    {
	    0 require ProxyRspHead head;		            //响应头部
	    1 require GetMyOrderListRsp body;	            //响应包体
    };

    // 获取订单列表--卖家
}; 
